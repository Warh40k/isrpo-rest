/*
 * AppRepo - Get apps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AppsApiController binds http requests to an api service and writes the service results to the http response
type AppsApiController struct {
	service      AppsApiServicer
	errorHandler ErrorHandler
}

// AppsApiOption for how the controller is set up.
type AppsApiOption func(*AppsApiController)

// WithAppsApiErrorHandler inject ErrorHandler into controller
func WithAppsApiErrorHandler(h ErrorHandler) AppsApiOption {
	return func(c *AppsApiController) {
		c.errorHandler = h
	}
}

// NewAppsApiController creates a default api controller
func NewAppsApiController(s AppsApiServicer, opts ...AppsApiOption) Router {
	controller := &AppsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppsApiController
func (c *AppsApiController) Routes() Routes {
	return Routes{
		{
			"AppCreatePost",
			strings.ToUpper("Post"),
			"/app/create",
			c.AppCreatePost,
		},
		{
			"AppDeleteDelete",
			strings.ToUpper("Delete"),
			"/app/delete",
			c.AppDeleteDelete,
		},
		{
			"AppGet",
			strings.ToUpper("Get"),
			"/app",
			c.AppGet,
		},
		{
			"AppUpdatePatch",
			strings.ToUpper("Patch"),
			"/app/update",
			c.AppUpdatePatch,
		},
		{
			"AppsGet",
			strings.ToUpper("Get"),
			"/apps",
			c.AppsGet,
		},
	}
}

// AppCreatePost - Создать новое приложение
func (c *AppsApiController) AppCreatePost(w http.ResponseWriter, r *http.Request) {
	appCreatePostRequestParam := AppCreatePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppCreatePostRequestRequired(appCreatePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppCreatePost(r.Context(), appCreatePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AppDeleteDelete - Удалить приложение по id
func (c *AppsApiController) AppDeleteDelete(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam, err := parseInt32Parameter(query.Get("id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AppDeleteDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AppGet - Получение описания приложения под номером id
func (c *AppsApiController) AppGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam, err := parseInt32Parameter(query.Get("id"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AppGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AppUpdatePatch - Обновить информацию о приложении
func (c *AppsApiController) AppUpdatePatch(w http.ResponseWriter, r *http.Request) {
	appUpdatePatchRequestParam := AppUpdatePatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appUpdatePatchRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppUpdatePatchRequestRequired(appUpdatePatchRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppUpdatePatch(r.Context(), appUpdatePatchRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AppsGet - Получение списка приложений (с пагинацией)
func (c *AppsApiController) AppsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AppsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
