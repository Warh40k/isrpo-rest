/*
 * AppRepo - Get apps
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
)

// AppsApiService is a service that implements the logic for the AppsApiServicer
// This service should implement the business logic for every endpoint for the AppsApi API.
// Include any external packages or services that will be required by this service.
type AppsApiService struct {
}

// NewAppsApiService creates a default api service
func NewAppsApiService() AppsApiServicer {
	return &AppsApiService{}
}

// AppCreatePost - Создать новое приложение
func (s *AppsApiService) AppCreatePost(ctx context.Context, appCreatePostRequest AppCreatePostRequest) (ImplResponse, error) {
	apps = append(apps, AppEntity{
		Id:          curid,
		Name:        appCreatePostRequest.Name,
		Description: appCreatePostRequest.Description,
	})
	curid++
	return Response(200, apps), nil
}

// AppDeleteDelete - Удалить приложение по id
func (s *AppsApiService) AppDeleteDelete(ctx context.Context, deleteId int32) (ImplResponse, error) {
	for i, app := range apps {
		if app.Id == deleteId {
			apps = append(apps[:i], apps[i+1:]...)
			return Response(200, nil), nil
		}
	}
	return Response(404, nil), errors.New("Приложение с указанным id отсутствует")
}

// AppGet - Получение описания приложения под номером id
func (s *AppsApiService) AppGet(ctx context.Context, id int32) (ImplResponse, error) {
	for _, app := range apps {
		if app.Id == id {
			return Response(200, app), nil
		}
	}
	return Response(200, nil), errors.New("Приложение с указанным id отсутствует")
}

// AppUpdatePatch - Обновить информацию о приложении
func (s *AppsApiService) AppUpdatePatch(ctx context.Context, request AppUpdatePatchRequest) (ImplResponse, error) {
	for i, app := range apps {
		if app.Id == request.Id {
			apps[i] = AppEntity{
				Id:          request.Id,
				Name:        request.Name,
				Description: request.Description,
			}
			return Response(200, nil), nil
		}
	}
	return Response(404, nil), errors.New("Приложение с указанным id отсутствует")
}

// AppsGet - Получение списка приложений (с пагинацией)
func (s *AppsApiService) AppsGet(ctx context.Context) (ImplResponse, error) {
	return Response(200, apps), nil
}
